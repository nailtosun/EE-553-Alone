function x_min = steepestDescent(f,x0,maxIteration,tol,algorithm)
% f: cost function
% x0: initial point
% maxIteration: allowed iteration number
% tol: tolerance -> abs(x_min-x*)

it = 1;
xp = x0;
while (it <= maxIteration)
    % FINDING SEARCH DIRECTION AT INITIAL POINT 
    d = -grad(f,xp);

    % FINDING UI: search length which satisfy convexity
    maxItForSearch = 1000;
    [y itL itS fCount alpha] = searchUI(f,x,d,maxItForSearch);
    % y is composed of two column vector where first column x0 and second 
    % column is x0+alpha*d
 
    % LINE SEARCH
    fnumber = 1000;
    if algorithm == 'goldenSearch'
        xp = goldenSearchWithFeval(f,y(:,2),y(:,1),fnumber);
    elseif algorithm == 'dichotomousSearch'
        xp = dichotomousWithFeval(f,fnumber,y(:,2),y(:,1));
    elseif algorithm == 'quadraticSearch'
        disp('GG');
        break
    elseif algorithm == 'fibonacciSearch'
        xp = fibonacciSearch(f,[y(:,2),y(:,1)],1e-6,display);
    elseif algorithm == 'secant'
        disp('GG');
        break
    elseif algorithm == 'newton'
        disp('GG');
        break
    else
        disp('GG');
        break
    end
    xn = xp + alpha*d;
end
end